node {
  def project = 'main-nova-202405'
  def appName = 'nginx'
  def feSvcName = "${appName}-frontend"
  def imageTag = "gcr.io/${project}/${appName}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
  
  def appName1 = 'node'
  def feSvcName1 = "${appName1}-frontend"
  def imageTag1 = "gcr.io/${project}/${appName1}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
  
  def CLUSTER = "jenkins-cd"
  def ZONE = "asia-southeast1-c"
  
  // gan cac thong so de chay cho 1 cluster, zone cua google cloud
  //sh("gcloud --quiet config set project ${project}")
  //sh("gcloud --quiet config set container/cluster ${CLUSTER}")
  //sh("gcloud --quiet config set compute/zone ${ZONE}")
  //sh("gcloud --quiet container clusters get-credentials ${CLUSTER}")
  
  checkout scm

  stage 'Build image'
  sh("docker build -t ${imageTag} -f nginx/nginx.Dockerfile .")
  sh("docker build -t ${imageTag1} -f nodejs/node.dockerfile .")

  stage 'Run nginx tests'
  //sh("docker run ${imageTag} nginx test")
  //sh("docker run ${imageTag1} node test")

  stage 'Push image to registry'
  sh("gcloud docker -- push ${imageTag}")
  sh("gcloud docker -- push ${imageTag1}")
  
  //---------------------------------------------------------------
  stage "Deploy Application"
  switch (env.BRANCH_NAME) {
    // Roll out to canary environment
    case "canary":
        // Change deployed image in canary to the one we just built
        sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${imageTag}#' ./k8s/canary/*.yaml")
        sh("kubectl --namespace=production apply -f k8s/services/")
        sh("kubectl --namespace=production apply -f k8s/canary/")
        sh("echo http://`kubectl --namespace=production get service/${feSvcName} --output=json | jq -r '.status.loadBalancer.ingress[0].ip'` > ${feSvcName}")
        break

    // Roll out to production
    case "master":
        // Change deployed image in canary to the one we just built
        sh("sed -i.bak 's#gcr.io/main-nova-202405/nginx:master.19#${imageTag}#' ./k8s/production/*.yaml")
		sh("sed -i.bak 's#gcr.io/main-nova-202405/node:master.19#${imageTag1}#' ./k8s/production/*.yaml")
        sh("kubectl --namespace=production apply -f k8s/services/")
        sh("kubectl --namespace=production apply -f k8s/production/")
        sh("echo http://`kubectl --namespace=production get service/${feSvcName} --output=json | jq -r '.status.loadBalancer.ingress[0].ip'` > ${feSvcName}")
        break

    // Roll out a dev environment
    default:
        // Create namespace if it doesn't exist
        sh("kubectl get ns ${env.BRANCH_NAME} || kubectl create ns ${env.BRANCH_NAME}")
        // Don't use public load balancing for development branches
        sh("sed -i.bak 's#LoadBalancer#ClusterIP#' ./k8s/services/frontend.yaml")
        sh("sed -i.bak 's#gcr.io/cloud-solutions-images/gceme:1.0.0#${imageTag}#' ./k8s/dev/*.yaml")
        sh("kubectl --namespace=${env.BRANCH_NAME} apply -f k8s/services/")
        sh("kubectl --namespace=${env.BRANCH_NAME} apply -f k8s/dev/")
        echo 'To access your environment run `kubectl proxy`'
        echo "Then access your service via http://localhost:8001/api/v1/proxy/namespaces/${env.BRANCH_NAME}/services/${feSvcName}:80/"
  }
}
